<?

class DrawEngine
{

  protected $lua = null;
  public $draw = null;
  protected $magic = null;
  protected $dimensions = array(320, 100);

  public function __construct($startupScript, $w, $h, $color)
  {
    $this->lua = new Lua();
    $this->lua->eval($startupScript);
    $this->magic = new Imagic();
    $this->magick->newImage($w, $h, $color);
    $this->draw = new XImagickDraw();
  }

  public function registerMethods($optionalMethodsMap)
  {
    $this->lua->registerCallback("getstrokecolor", function(){return $this->draw->getStrokeColor()->getColor();});
    $this->lua->registerCallback("getfillcolor", function() return $this->draw->getFillColor()->getColor();});

    $this->lua->registerCallback("setstrokecolor", function($value){
	if (is_string($value)) {
	    $this->draw->setStrokeColor($value);
	}
	if (is_array($value)) {
	    $r = $value['r'];
	    $g = $value['g'];
	    $b = $value['b'];
	    $this->draw->setStrokeColor('#'.rgbToHex($r, $g, $b));
	}
    }
    );
    
    $this->lua->registerCallback("setfillcolor", function($value){
	if (is_string($value)) {
	    $this->draw->setFillColor($value);
	}
	if (is_array($value)) {
	    $r = $value['r'];
	    $g = $value['g'];
	    $b = $value['b'];
	    $this->draw->setFillColor('#'.rgbToHex($r, $g, $b));
	}
    }
    );
    
    $this->lua->registerCallback("newcolor", function($name){return new ImagickPixel($name);});
    $this->lua->registerCallback("print", function($text){$this->draw->annotation(5,5,print_r($text, true));});

    $this->lua->registerCallback("array", function(){return array(func_get_args());});
    $this->lua->registerCallback("dump", "var_dump");
  }

  $imagickMethods = get_class_methods(get_class($this->draw));

  $disabledMethods = array();

  #var_dump($imagickMethods);
  foreach ($imagickMethods as $method)
  {
      $this->lua->registerCallback($method, array($this->draw, $method));
  }

  protected function rgbToHex($r,$g,$b)
  {
      $s='';
      $h='';
      $x='0123456789ABCDEF';

      $s=array($r,$g,$b);
      if($s)
      {
	  for ($i=0; $i < 3; $i++)
	  {
	      $h .= substr($x,$s[$i]>>4,1).substr($x,$s[$i]&15,1);
	  }
	  return $h;
      }
      else
	  return null;

      return false;
  }

  public function done()
  {
      $this->magic->drawImage($this->draw);
      $this->magic->setimageformat("png");
      header('Content-Type: image/jpg');
      echo $this->magic;
  }

  public function render($func, $args = null)
  {
    $this->lua->call($func, $args)
  }

}

class XImagickDraw extends ImagickDraw
{
  private $colors = array();

  public function setColor($name, $color)
  {
    $this->colors[$name] = $color;
  }

  public function getColor($name)
  {
    if(isset($this->colors[$name]))
    {
      return $this->colors[$name];
      }
  }
}